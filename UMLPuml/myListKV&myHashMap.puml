@startuml

class MyHashMap<K, V> {
    -MyList<K, V>* table
    -int capacity
    -int hash(const K& key) const
    +MyHashMap(int cap = 10)
    +~MyHashMap()
    +V HGET(const K& key)
    +void HSET(const K& key, const V& value)
    +void HDEL(const K& key)
    +void print() const
    +void saveToFile(const std::string& filename) const
    +void loadFromFile(const std::string& filename)
    +void saveToBinaryFile(const std::string& filename) const
    +void loadFromBinaryFile(const std::string& filename)
    +void clear()
}

class MyList<K, V> {
    -Node* head
    -Node* tail
    -int length
    +MyList()
    +~MyList()
    +void push_back(const K& key, const V& value)
    +bool find(const K& key, V& value) const
    +bool findAt(int index, K& key, V& value) const
    +bool remove(const K& key)
    +void print() const
    +int size() const
    +void clear()
}

class Node<K, V> {
    -K key
    -V value
    -Node* next
    +Node(K key, V value)
}

MyHashMap "1" *-- "0..*" MyList : contains >
MyList "1" *-- "0..*" Node : contains >

@enduml